#!/bin/bash -l
#
#                         License
#
# Copyright (C) 2021
#	David Valin dvalin@redhat.com
#	Sanjay Rao  srao@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
#
# Automates the installation and execution of the hammerdb tests, mariadb, postgress and
# mssql.
#
set -u
mountpoint=
log_mount_point=""
disklist=
warehousecount=""
#usercount="10 20 40 80 100"
usercount="10 20 40"
tests_to_run=()
dbhosts=()
rundate=$(date +%Y.%m.%d.%H.%M.%S)
usage()
{
	cat <<EOF
HOST NAME or IP REQUIRED!! - see usage below
Usage:
./run_hammerdb.sh [-h] [-H Host names] [-d device] [-m mount point]
Usage:
  -h help
  -H <Host names separated by space> - default 127.0.0.1
  -d <device > - default none
  -m <mount points> - default none
  -t <test to run> mariadb/postgres/mssql
  -u <user count> - default "10 20 30 40 50"
  -w <warehouse count> - default "500"

  Examples:"
  ./run_hammerdb.sh -H "dhcp31-32 dhcp31-33" -t mariadb
  ./run_hammerdb.sh -H "10.16.31.32 10.16.31.33" -t postgres
  ./run_hammerdb.sh -H "10.16.31.32 10.16.31.33" -d "/dev/vdb" -t mssql
  ./run_hammerdb.sh -H "10.16.31.32 10.16.31.33" -m "/perf1" -t mariadb
  ./run_hammerdb.sh -H "dhcp31-32 dhcp31-33" -m "/perf1" -w 100 -u "10 20" -t mariadb
EOF
	exit
}

#
# Generic routines
#
mount_check()
{
	[[ -n "${mountpoint:-}" || -n "${disklist:?Please specify a disk device or Mount Point}" ]]
}

#
# Invoke the install script on the proper system
#
install_it()
{
	local test=${1:?Missing test name to install}
	if [[ -n "${dbhosts[*]:-}" ]] ; then
		echo "Remote install"
		#
		# Remote systems
		#
		local hostnm
		for hostnm in "${dbhosts[@]}"; do
			if [[ -z "${mountpoint:-}" ]]; then
				ssh -n "root@${hostnm}" "./install-script -d '${disklist}' -t '$test' ${log_mount_point}" &
			else
				ssh -n "root@${hostnm}" "rm -rf '${mountpoint:?}/${test}'"
				ssh -n "root@${hostnm}" "./install-script -m '${mountpoint:?}/${test}' -t '$test' ${log_mount_point}" & 
			fi
		done
		wait
		if [[ -n "${2:-}" ]] ; then
			for hostnm in "${dbhosts[@]}"; do
				ssh -n "root@$hostnm" systemctl restart "$2"
			done
		fi
	else
		echo "Local install"
		#
		# Local system
		#
		if [[ -n "${mountpoint:-}" ]]; then
			rm -rf "${mountpoint:?}/$test"
			# shellcheck disable=SC2086
			./install-script -m "${mountpoint:?}/$test" -t "$1" ${log_mount_point}
		else
			# shellcheck disable=SC2086
			./install-script -d "$disklist" -t "$1" ${log_mount_point}
		fi
		[[ -n "${2:-}" ]] && systemctl restart "$2"
	fi
	echo "$1" installed and started.  Doing required builds
}

#
# Clean up the temporary database
#
clean_it() {
	local test=${1:?Missing test name to uninstall}
	if [[ -n "${mountpoint:-}" ]] ; then
		if [[ -n "${dbhosts[*]:-}" ]] ; then
			#
			# Remote systems
			#
			local hostnm
			for hostnm in "${dbhosts[@]}}"; do
				ssh -n "root@${hostnm}" "rm -rf '${mountpoint:?}/${test}'"
			done
		else
			#
			# Local system
			#
			rm -rf "${mountpoint:?}/$test"
		fi
	fi
	echo "$1 cleaned up"
}

#
# General run
#
run_hammerdb_users()
{
	local -i ctr=1
	local uc=${1:?Missing user count to run}
	local test=${2:?Missing test name to run}
	local tname=$test
	[[ $test = postgres ]] && tname=pg
	#
	# Due to the cloud systems, not logging in as root, we need two separate areas.  One
	# that operates on remote systems, the other that operate on the system we are currently
	# running on.
	if [[ -n "${dbhosts[*]:-}" ]]; then
		local hostnm
		for hostnm in "${dbhosts[@]}" ;do
			runtestfile=runtest${ctr}_${test}.tcl
			outfile=test_${test}_${rundate}_n${numhosts}_i${ctr}_${uc}.out
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB && cp 'runtest_${tname}.tcl' '$runtestfile'"
			case "$test" in
				mariadb)
					ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^diset connection mysql_host.*/diset connection mysql_host ${hostnm}/' '$runtestfile'"
					;;
				mssql)
					ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^diset tpcc mssqls_count_ware.*/diset tpcc mssqls_count_ware ${warehousecount}/' '$runtestfile"
					;;
				postgres)
					ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^diset connection pg_host.*/diset connection pg_host ${hostnm}/' '$runtestfile'"
					;;
			esac
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^vuset.*/vuset vu ${uc}/' '$runtestfile'"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; nohup ./hammerdbcli auto '$runtestfile'" > "$outfile" 2>&1 &
			ctr=$((ctr + 1))
		done
		#
		# Wait for everyone to complete.
		#
		wait
		#
		# Give things a chance to settle down.
		#
		sleep 120
	else
		runtestfile=runtest${ctr}_${test}.tcl
		outfile=test_${test}_${rundate}_n${ctr}_i${ctr}_${uc}.out
		resultfile=results_hammerdb_${test}.csv
		echo "Outfile is $outfile"
		echo "runtestfile is $runtestfile"
		cp "runtest_${tname}.tcl" "$runtestfile"

		case "$test" in
			mariadb)
				sed -i "s/^diset connection mysql_host.*/diset connection mysql_host localhost/" "$runtestfile"
				;;
			mssql)
 				sed -i "s/^diset tpcc mssqls_count_ware.*/diset tpcc mssqls_count_ware ${warehousecount}/" "$runtestfile"
				;;
			postgres)
				sed -i "s/^diset connection pg_host.*/diset connection pg_host localhost/" "$runtestfile"
				;;
		esac
		sed -i "s/^vuset.*/vuset vu ${uc}/" "$runtestfile"
		./hammerdbcli auto "$runtestfile" > "$outfile" 2>&1
		grep TPM "$outfile" | awk '{print $7}'
		if [[ ! -f "$resultfile" ]] ; then
			echo "# connection:TPM" > "$resultfile"
		fi
		shopt -s nullglob
		for file in "test_${test}_${rundate}_"*.out ; do
			connections=$(grep "Active Virtual Users configured" "$file" | cut -d: -f 2 | cut -d' ' -f 1)
			tpms=$(grep TPM "$file" | cut -d' ' -f 7)
			echo "${connections}:${tpms}" >> "$resultfile"
		done
	fi
	echo "${uc} User run for $test done"
}

#
# Install the install script as required.
#
install_install_script()
{
	if [[ -n "${dbhosts[*]:-}" ]] ; then
		#
		# copy scripts to the VMS
		#
		local hostnm
		for hostnm in "${dbhosts[@]}" ; do
			scp install-script "root@${hostnm}:/root"
		done
	else
		#
		# copy the script to root
		#
		cp install-script /root 
	fi
}

#
# Shut down the services started.
#
shut_down()
{
	#
	# Shut down the service
	#

	local test=${1:?Missing test name to shut down}	
	echo "All runs done. Stopping $1"

	if [[ -n "${dbhosts[*]:-}" ]] ; then
		local hostmm
		for hostnm in "${dbhosts[@]}" ; do
			ssh -n "root@$hostnm" "systemctl stop '$test'"
		done
	else
		systemctl stop "$test"
	fi
}

#
# Walk through the user count and run hammerdb
# 
run_hammerdb()
{
	local uc
	for uc in $usercount ; do
		 run_hammerdb_users "$uc" "$@"
	done
}

mariadb_build()
{
	local -i ctr=1
	if [[ -n "${dbhosts[*]:-}" ]] ; then
		local hostnm
		for hostnm in "${dbhosts[@]}" ; do
			ssh -n "root@$hostnm" "mysql -p100yard- -e 'drop database tpcc;'"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB && cp build_mariadb.tcl 'build${ctr}_mariadb.tcl'"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB && sed -i 's/^diset connection mysql_host.*/diset connection mysql_host ${hostnm}/' 'build${ctr}_mariadb.tcl'"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB && sed -i 's/^diset tpcc mysql_count_ware.*/diset tpcc mysql_count_ware ${warehousecount}/' 'build${ctr}_mariadb.tcl'"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB && nohup ./hammerdbcli auto build${ctr}_mariadb.tcl > build_mariadb_pod${ctr}.out 2>&1 " &
   			numhosts=${ctr}
			ctr=$((ctr + 1))
		done
		#
		# Wait for all the builds and loads to complete.
		#
		wait
	else
		#
		# Set it up, and build the dbase
		#
		mysql -p100yard- -e 'drop database tpcc;'
		cd /usr/local/HammerDB || exit
       		cp build_mariadb.tcl build${ctr}_mariadb.tcl
		sed -i "s/^diset connection mysql_host.*/diset connection mysql_host localhost/" build${ctr}_mariadb.tcl
		sed -i "s/^diset tpcc mysql_count_ware.*/diset tpcc mysql_count_ware ${warehousecount}/" build${ctr}_mariadb.tcl
		./hammerdbcli auto build${ctr}_mariadb.tcl > build_mariadb_pod${ctr}.out 2>&1
	fi
}

mariadb_test()
{
	install_it mariadb
	mariadb_build
	#
	# Run the actual test.
	#
	run_hammerdb mariadb
	shut_down mariadb.service
	clean_it mariadb
}

mssql_build()
{
	local -i ctr=1
	if [[ -n "${dbhosts[*]:-}" ]] ; then
		local hostnm
		for hostnm in "${dbhosts[@]}" ; do
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; cp build_mssql.tcl build${ctr}_mssql.tcl"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^diset tpcc mssqls_count_ware.*/diset tpcc mssqls_count_ware ${warehousecount}/' build${ctr}_mssql.tcl"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; nohup ./hammerdbcli auto build${ctr}_mssql.tcl > build_mssql${ctr}.out 2>&1 " &
			numhosts=${ctr}
			ctr=$((ctr + 1))
		done
		wait
	else
		cd /usr/local/HammerDB || exit
		cp build_mssql.tcl "build${ctr}_mssql.tcl"
		sed -i "s/^diset tpcc mssqls_count_ware.*/diset tpcc mssqls_count_ware ${warehousecount}/" build${ctr}_mssql.tcl
		./hammerdbcli auto build${ctr}_mssql.tcl > build_mssql${ctr}.out 2>&1
	fi
}

mssql_test()
{
	install_it mssql "mssql-server"
	#
	# Pause to give mssql-server a chance.
	#
	sleep 60
	mssql_build

	run_hammerdb mssql
	shut_down "mssql-server.service"
	clean_it mssql
}

postgres_build()
{
	local -i ctr=1
	if [[ -n "${dbhosts[*]:-}" ]] ; then
		local hostnm
		for hostnm in "${dbhosts[@]}" ; do
			ssh -n "root@$hostnm" "echo 'DROP DATABASE tpcc;' > input"
			ssh -n "root@$hostnm" "echo 'DROP ROLE tpcc;' >> input"
			ssh -n "root@$hostnm" "/usr/bin/psql -U postgres -d postgres -h ${hostnm} -f input"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; cp build_pg.tcl build${ctr}_pg.tcl"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; sed -i 's/^diset connection pg_host.*/diset connection pg_host ${hostnm}/' build${ctr}_pg.tcl"
			ssh -n "root@$hostnm" "cd /usr/local/HammerDB; nohup ./hammerdbcli auto build${ctr}_pg.tcl > build_pg${ctr}.out 2>&1 " &
   			numhosts=${ctr}
			ctr=$((ctr + 1))
		done
		wait
	else
		echo 'DROP DATABASE tpcc;' > input
		echo 'DROP ROLE tpcc;' >> input
		/usr/bin/psql -U postgres -d postgres -h "localhost" -f input
		cd /usr/local/HammerDB || exit 1
		cp build_pg.tcl build${ctr}_pg.tcl
		sed -i "s/^diset connection pg_host.*/diset connection pg_host localhost/" build${ctr}_pg.tcl
       		./hammerdbcli auto build${ctr}_pg.tcl > build_pg${ctr}.out 2>&1
		ctr=$((ctr + 1))
	fi
	echo "Build done"
}

postgres_test()
{
	install_it postgres postgresql

	#
	# Pause to give postgresql a chance.
	#
	sleep 60
	postgres_build

	run_hammerdb postgres

	echo "All runs done. Stopping Postgres database instances"

	shut_down postgresql
	clean_it postgres
}

#
# Were we passed an argument?
#

while getopts 'hH:d:M:m:w:u:t:' opt "$@" ; do
	# shellcheck disable=SC2206
	case "$opt" in
		h) usage ;;
		H) dbhosts+=(${OPTARG//,/ }) ;;
		d) disklist=$OPTARG ;;
		M) log_mount_point="-M $OPTARG" ;;
		m) mountpoint=$OPTARG ;;
		w) warehousecount=$OPTARG ;;
		u) usercount=$OPTARG ;;
		t) tests_to_run+=(${OPTARG//,/ }) ;;
		*) usage ;;
	esac
done
shift $((OPTIND=1))

#
# If no test to run designated, bail.
#
if [[ -z "${tests_to_run[*]:-}" ]] ; then
	echo You need to designate a test to run.
	usage
fi

install_install_script
mount_check
#
# Determine what we are to run and run it.
#
for test in "${tests_to_run[@]}" ; do
	case "$test" in
		mariadb*) (warehousecount=${warehousecount:-1000} mariadb_test) ;;
		mssql) (warehousecount=${warehousecount:-500} mssql_test) ;;
		postgres*) (warehousecount=${warehousecount:-500} postgres_test) ;;
		*) echo "Unknown test $test"
	esac
done

# Local Variables:
# sh-indentation: 8
# End:
