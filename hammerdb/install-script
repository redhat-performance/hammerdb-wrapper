#!/bin/bash
#
# Copyright (C) 2022  Sanjay Rao srao@redhat.com
#                     David Valin dvalin@redhat.com
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# Script to set the system up for running hammerdb.
#
disks=
mountpoint=
db_type=
log_mount_point=

install_mssql()
{
	cp /tmp/hammerdb-tpcc/mssql/mssql-repo-2019.repo /etc/yum.repos.d
	yum -y install mssql-server
	curl https://packages.microsoft.com/config/rhel/7/prod.repo > /etc/yum.repos.d/msprod.repo
	yum -y remove unixODBC-utf16 unixODBC-utf16-devel
	ACCEPT_EULA=Y yum install -y mssql-tools unixODBC-devel
	# shellcheck disable=SC2016
	echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bash_profile
	cd /usr/local/HammerDB || fatal "Cannot cd /usr/local/hammerdb"
	cp -R  /tmp/hammerdb-tpcc/mssql/* .


	rm -rf "${mountpoint}"/mssql_data/
	mkdir -p "${mountpoint}"/mssql_data
	chown -R mssql:mssql "${mountpoint}"/mssql_data 
	
	systemctl stop mssql-server

	cd /opt/mssql/bin/ || fatal "Cannot cd /opt/mssql/bin"
	mkdir /var/opt/mssql/secrets/

	MSSQL_SA_PASSWORD="100yard-"
	export MSSQL_SA_PASSWORD
	export MSSQL_PID="Evaluation"

	rm -rf /var/opt/mssql
	chmod 777 /var/opt

	./mssql-conf -n setup accept-eula <<'EOF'
1
Yes
100yard-
100yard-
EOF

	sleep 30
	systemctl stop mssql-server

	cd /var/opt/mssql || fatal "Cannot cd /var/opt/mssql"
	mv data "${mountpoint}"/mssql_data
	ln -sf "${mountpoint}"/mssql_data/data .

	systemctl disable mssql-server.service
	systemctl restart mssql-server.service

	cd /usr/local/HammerDB || fatal "Cannot cd /usr/local/hammerdb"

	./createdb_mssql_mnt.sh -m "${mountpoint}" > crdb.out 2>&1

	./update_temp_mnt.sh -m "${mountpoint}" > upd_tmp.out 2>&1
}

install_mariadb()
{
	#
	# Install Mariadb Server and tools
	#
#	dnf -y install mariadb.x86_64 mariadb-common.x86_64 mariadb-devel.x86_64 \
#	mariadb-errmsg.x86_64 mariadb-server.x86_64 mariadb-server-utils.x86_64 mysql-libs.x86_64
	dnf -y install mariadb.x86_64 mariadb-common.x86_64 \
	mariadb-errmsg.x86_64 mariadb-server.x86_64 mariadb-server-utils.x86_64


	#
	# Configure things in and mount the appropriate item.
	#
	cd /usr/local/HammerDB || fatal "Cannot cd /usr/local/hammerdb"
	cp -R  /tmp/hammerdb-tpcc/mariadb/* .

	#
	# Clean up any residual stuff and set up the directories
	#
	rm -rf "${mountpoint}"/mysql/* "${log_mount_point}"/mysql/log
	mkdir -p "${mountpoint}"/mysql/data
	chown -R mysql:mysql "${mountpoint}"/mysql
        mkdir -p "${log_mount_point}"/mysql/log
        chown -R mysql:mysql "${log_mount_point}"/mysql


	totmem=$(grep MemTotal /proc/meminfo | awk '{print $2}')
	#
	# Updating the value of buffer_pool_size based on available memory
	# Setting bufferpool to half of physical memory if memory is less than 128G else set to 64G
	#
	totmem_BP=$((totmem / 1024))
	totmem_BP=$((totmem_BP / 2))

	#
	# Configure the mariadb config file with mountpoint and bufferpool
	#

	sed -i "s+^datadir=.*+datadir=${mountpoint}\/mysql\/data+" my.cnf
	if ((totmem_BP << 64000 )); then
   		sed -i "s/^innodb_buffer_pool_size=.*/innodb_buffer_pool_size=${totmem_BP}M/" my.cnf
	else
   		sed -i "s/^innodb_buffer_pool_size=.*/innodb_buffer_pool_size=64000M/" my.cnf
	fi
	sed -i "/innodb_file_per_table/a innodb_log_group_home_dir = ${log_mount_point}\/mysql\/log" my.cnf

	/usr/bin/cp my.cnf /etc/my.cnf

	systemctl restart mariadb.service

	#echo "UPDATE mysql.user SET Password=PASSWORD('100yard-')  WHERE User='root';" > input
	#echo "GRANT ALL ON *.* to root@'%' IDENTIFIED BY '100yard-';" >> input
    	echo "SET PASSWORD FOR 'root'@localhost = PASSWORD('mysql');" > input
	echo "flush privileges;" >> input
	echo "exit" >> input

	mysql -u root < input

	sleep 30
	systemctl restart mariadb.service
}

install_postgres()
{
	#
	# Installing Postgres Server and tools
	#
	dnf -y install postgresql.x86_64 postgresql-contrib.x86_64 postgresql-server.x86_64 glibc-langpack-en libpq

	cd /usr/local/HammerDB || fatal "Cannot cd /usr/local/hammerdb"
	cp -R /tmp/hammerdb-tpcc/postgres/* .

	rm -rf /var/lib/pgsql/data
	rm -rf "${mountpoint}"/postgres_data

	mkdir -p "${mountpoint}"/postgres_data
	ln -sf "${mountpoint}"/postgres_data /var/lib/pgsql/data
	chmod 700 "${mountpoint}"/postgres_data
	chown -R postgres:postgres "${mountpoint}"/postgres_data
        mkdir -p "${log_mount_point}"/postgres_log
        chown -R mysql:mysql "${log_mount_point}"/postgres_log

	postgresql-setup initdb
	sleep 10
	mv /var/lib/pgsql/data/pg_wal "${log_mount_point}"/postgres_log
	ln -sf "${log_mount_point}"/postgres_log/pg_wal /var/lib/pgsql/data/pg_wal

	totmem=$(grep MemTotal /proc/meminfo | awk '{print $2}')

	#
	# Change shared_buffer size based on available memory
	#
	totmem_MB=$((totmem / 1024))
	totmem_BP=$((totmem_MB / 2))   # Buffer pool is half of physical memory
	#
	# IF total memory is more than 128G then bufferpool is set to 64G else set to half of physical memory
	#
	if ((totmem_BP < 65000)) ; then
   		sed -i "s/^shared_buffers =.*/shared_buffers = ${totmem_BP}MB/" postgresql.conf
	else
	   	sed -i "s/^shared_buffers =.*/shared_buffers = 64000MB/" postgresql.conf
	fi

	/usr/bin/cp -f pg_hba.conf /var/lib/pgsql/data
	/usr/bin/cp -f postgresql.conf /var/lib/pgsql/data
	systemctl restart postgresql
	echo "alter role postgres password 'postgres'" > input

	psql -U postgres -d postgres < input
	sleep 30
	systemctl restart postgresql.service
}

usage()
{
        cat <<'EOF'
Usage:
        ./install-script [-h] [-d disk name] [-m mount point] [-t dbtype]

        Usage:
        -h help
        -d <disk device name>
        -m <mount point>
	-t <mariadb, mssql, postgres>


       Examples:
        ./install-script -d '/dev/sdb' 
        ./install-script -d '/perf1' 
EOF
        exit
}

fatal()
{
	echo "$*"
	exit 1
}

#
# If we did not pass any arguments, flag it.
#
if [ $# -eq 0 ]; then
    usage
fi

while getopts 'hd:M:m:t:' opt ; do
	case "$opt" in
		d) disks="$OPTARG" ;;
		M) log_mount_point="$OPTARG" ;;
		m) mountpoint="$OPTARG" ;;
		t) db_type="$OPTARG" ;;
		h) usage ;;
		*) usage ;;
	esac
done

if [[ -z "$db_type" ]]; then
	echo "You need to designate the db type."
	usage
fi

#
# Turn selinux off.
#
setenforce 0

#
# Retrieve the hammerdb script
#
curl -k -o /tmp/hammerdb-tpcc.tar https://people.redhat.com/srao/Hammerdb-Kit/hammerdb-tpcc.tar

#
# Install the hammerdb
#
cd /tmp || fatal "Cannot cd /tmp"
tar xf hammerdb-tpcc.tar
cd /tmp/hammerdb-tpcc/Hammerdb || fatal "Cannot cd to hammerdb package directory!"
unset DISPLAY
./HammerDB-3.2-Linux-x86-64-Install <<'EOF'
y
/usr/local/HammerDB
EOF

#
# Shutdown all running instances
#
systemctl stop mssql-server
systemctl stop postgresql
systemctl stop mariadb

#
# Create filestems and mount if required
#
if [[ -z "$mountpoint" ]]; then
	if [[ -z "$disks" ]] ; then
		echo "Disk must be specified if -m is not used"
		usage
	fi
	echo "using disk option"
	umount /perf1
	mkfs.xfs -f "${disks}"
	mkdir -p /perf1
	mount "${disks}" /perf1
	mountpoint="/perf1"
else
	echo "using mountpoint option"
	echo "${mountpoint}"
fi

log_mount_point=${log_mount_point:-$mountpoint}
case "$db_type" in
	mssql) install_mssql ;;
	mariadb) install_mariadb ;;
	postgres) install_postgres ;;
	*) echo "Unknown database $db_type specified"; usage ;;
esac

# Local Variables:
# sh-indentation: 8
# End:
